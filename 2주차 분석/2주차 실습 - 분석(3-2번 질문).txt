1번
#pragma warning (disable:4996)
#include <stdio.h>
#include <stdlib.h>
int modulo(a,b)
{
	if (a != 0) {			//늘 맨 첫항, 끝항, 0인 경우, 전부 같은(중복) 경우 등의 조건 생각
		while (a - b >= 0) {
			a -= b;		//나누기+나머지의 원리랄까
		}
	}

	return a;
}
int main() {
	int a, b;
	scanf("%d %d", &a, &b);
	printf("%d", modulo(a, b));
}
//늘 문제의 조건 파악. ('/', '%'없이 +-로 나머지 구하기)



2번
1 1 1 1 0 0 0 0
1 1 1 1 1 0 0 0
1 0 0 0 0 0 0 0
1 1 1 1 1 1 0 0
1 1 1 1 0 0 0 0
0 0 0 0 0 0 0 0
1 1 1 1 1 1 1 0
1 1 1 1 1 0 0 0

60점
#pragma warning (disable:4996)
#include <stdio.h>
#include <stdlib.h>
int mostOnes(int A[][100], int n) {
	int i, j, max, max_i, next_j, cnt = 0;

	max = max_i = next_j = 0;
	for (i = 0; i < n; i++) {
		for (j = next_j; j < n; j++) {
			if (A[i][next_j] == 0) {
				if (next_j == 0) {
					max_i = i;
					continue;
				}
				else if(next_j>0 && A[i][next_j - 1] == 1)
				{
					max_i = i;
					continue;
				}

			}
			else {
				if (A[i][j] == 1)
					cnt++;

				else {
					max = cnt;
					next_j = j;
					max_i = i;
					break;
				}
			}
		}
	}

	return max_i;
}
int main() {
	int N, i, j, A[100][100];

	scanf("%d", &N);

	for (i = 0; i < N; i++) {
		for (j = 0; j < N; j++)
			scanf("%d", &A[i][j]);
	}

	printf("%d", mostOnes(A, N));
}


80점
#pragma warning (disable:4996)
#include <stdio.h>
#include <stdlib.h>
int mostOnes(int A[][100], int n) {
	int i, j, max, max_i, next_j, cnt = 0;

	max = max_i = next_j = 0;
	for (i = 0; i < n; i++) {
		for (j = next_j; j < n; j++) {
			if (A[i][next_j] == 0)
				continue;
			else {
				if (A[i][j] == 1)
					cnt++;

				else {
					max = cnt;
					next_j = j;
					max_i = i;
					break;
				}
			}
		}
	}

	return max_i;
}
int main() {
	int N, i, j, A[100][100];

	scanf("%d", &N);

	for (i = 0; i < N; i++) {
		for (j = 0; j < N; j++)
			scanf("%d", &A[i][j]);
	}

	printf("%d", mostOnes(A, N));
}



100점
#pragma warning (disable:4996)
#include <stdio.h>
#include <stdlib.h>
int mostOnes(int A[][100], int n) {
	int i, j, max, max_i, next_j, cnt = 0;

	max = max_i = next_j = 0;
	for (i = 0; i < n; i++) {
		for (j = next_j; j < n; j++) {
			if (A[i][next_j] == 0)
				continue;
			else {
				if (A[i][j] == 1) {
					if (j == n - 1) {
						max = cnt;
						next_j = j;
						max_i = i;
						break;
					}
					else
						cnt++;
				}
				else if(A[i][j]==0) {
					max = cnt;
					next_j = j;
					max_i = i;
					break;
				}
			}
		}
	}

	return max_i;
}
int main() {
	int N, i, j, A[100][100];

	scanf("%d", &N);

	for (i = 0; i < N; i++) {
		for (j = 0; j < N; j++)
			scanf("%d", &A[i][j]);
	}

	printf("%d", mostOnes(A, N));
}



100점 완성
#pragma warning (disable:4996)
#include <stdio.h>
#include <stdlib.h>
int mostOnes(int A[][100], int n) {
	int i, j, max, max_i, next_j, f, cnt = 0;

	max = max_i = next_j = f= 0;
	for (i = 0; i < n; i++) {
		for (j = next_j; j < n; j++) {		//앞으로 자료구조에서 써먹을 알고리즘. j=next_j부터 시작하는 루프문 잘 인지
			if (A[i][next_j] == 0)
				/*맨 처음 어떤 조건판별부터 하는 지가 코드에서 중첩조건 바깥 안 여부를 결정하지 않음.
			하나의 2중반복문(행 하나)안 에서 누가 먼저 이루어지나 판별(so 한칸 아래로 내려왔을 때 1인지 0인지 먼저 구분하는게
			이후 오른쪽으로 0 1 판별하는 것보다 상위 조건문임*/
				continue;
			else {

				if (A[i][j] == 1) {
					if (j == n - 1 && f==0) {
						max = ++cnt;
						next_j = j;
						max_i = i;		//max_j보다는 next_j라는 표현 언제 쓸지 잘 생각(헷갈리지 않게)
						f = 1;	
							//플래그 안 쓸라했는데 맨 끝이 1인 경우가 여러번일 때 가장 작은 행을 출력하기 위해선 어쩔 수 없음
					}
					else
						cnt++;
				}
				else {
					max = cnt;
					next_j = j;
					max_i = i;
					break;
				}
			}
		}
	}

	return max_i;
}
int main() {
	int N, i, j, A[100][100];

	scanf("%d", &N);

	for (i = 0; i < N; i++) {
		for (j = 0; j < N; j++)
			scanf("%d", &A[i][j]);
	}

	printf("%d", mostOnes(A, N));
}






3-1번
#pragma warning (disable:4996)
#include <stdio.h>
#include <stdlib.h>
int* prefixAverages1(int* X, int n) {
	int i, j, * A=NULL;			//기왕이면 계속 NULL로 초기화 해주고
	double sum;
	A = (int*)malloc(sizeof(int) * n);
	for (i = 0; i < n; i++) {
		sum = 0;
		for (j = 0; j < i + 1; j++)
			sum += X[j];
		A[i] = (int)((sum / (i + 1)) + 0.5);
			//sum이 실수라고 명시를 안 했어도, 소수가 필요한 연산에 포함되있다면 항상 확인해볼 것(double sum!!)
	}
	return A;
}
int* prefixAverages2(int* X, int n) {
	int i,* A=NULL;
	double sum;
	A = (int*)malloc(sizeof(int) * n);

	sum = 0;
	for (i = 0; i < n; i++) {
		sum = sum + X[i];		//기본적인 '합에서 끝 항 추가'
			//합, 평균, 최댓값 구할 때 항상 이미 쌓인 데이터에서 끝항만 추가하는 방식의 알고리즘 생각. 이번 파트가 그런 예시
		A[i] = (int)((sum / (i + 1)) + 0.5);	//c언어 자료형 바꾸는 법	

	}
	return A;
}

int main() {
	int N, i, * X, * A;
	scanf("%d", &N);
	X = (int*)malloc(sizeof(int) * N);
	if(X=='NULL'){
		printf("Not enough memory!\n");
		return -1;
	}		//동적할당 후 늘 필수

	for (i = 0; i < N; i++) {
		scanf("%d", &X[i]);
	}

	A = prefixAverages1(X, N);
	for (i = 0; i < N; i++)
		printf("%d ", A[i]);

	printf("\n");

	A = prefixAverages2(X, N);
	for (i = 0; i < N; i++)
		printf("%d ", A[i]);

	free(X)	//동적할당 후 늘 필수

}





3-2번
#pragma warning (disable:4996)
#include <stdio.h>
#include <stdlib.h>
#include <Windows.h>
int* prefixAverages1(int* X, int n) {
	int i, j, sum, * A;
	A = (int*)malloc(sizeof(int) * n);
	for (i = 0; i < n; i++) {
		sum = 0;
		for (j = 0; j < i + 1; j++)
			sum += X[j];
		A[i] = (int)((sum / (i + 1)) + 0.5);
	}
	return A;
}
int* prefixAverages2(int* X, int n) {
	int i, j, sum, * A;
	A = (int*)malloc(sizeof(int) * n);

	sum = 0;
	for (i = 0; i < n; i++) {
		sum = sum + X[i];
		A[i] = (int)((sum/ (i + 1))+0.5);
	}
	return A;
}

int main() {
	int N, i, * X, * A, *B;
	LARGE_INTEGER ticksPerSec;
	LARGE_INTEGER start, end, diff;


	scanf("%d", &N);
	X = (int*)malloc(sizeof(int) * N);
	for (i = 0; i < N; i++) {
		X[i] = rand() % 10001;
	}

	QueryPerformanceFrequency(&ticksPerSec);	//얘는 한 번만 해도 되는건가? 아니면 밑에 함수2 실행할 때도 켜줘야 하나 => 그런듯
	QueryPerformanceCounter(&start);
	A = prefixAverages1(X, N);
	QueryPerformanceCounter(&end);
	diff.QuadPart = end.QuadPart - start.QuadPart;
	printf("%.12fms\n\n", ((double)diff.QuadPart / (double)ticksPerSec.QuadPart)*1000);


	printf("\n");

	free(A);

	QueryPerformanceCounter(&start);
	A = prefixAverages2(X, N);
	QueryPerformanceCounter(&end);
	diff.QuadPart = end.QuadPart - start.QuadPart;
	printf("%.12fms\n\n", ((double)diff.QuadPart / (double)ticksPerSec.QuadPart)*1000);


	free(A);
	free(X);
}

//1학년때도 그랬지만 늘 문제를 꼼꼼히 읽고 조건을 확실하게 확인할 것(중복된 최댓값 중 제일 작은 행, +-로만 나머지 구하기, double sum 등