1번
#include <stdio.h>
#include <stdlib.h>
#pragma warning(disable:4996)
typedef struct ListNode {
    char ch;
    struct ListNode* llink,* rlink;     //여기다가 'listNode*라고 쓰면 대참사 남. tmp->llink->rlink 안 써짐. 아직 def 하기도 전인데 listNode라고 쓰면 어떡하니??
}listNode;

typedef struct HeadNode {
    struct listNode* head;
}headNode;

void add(headNode* list, int r, char e);
void delete(headNode* list, int r);
void get(headNode* list, int r);
void print(headNode* list);


int main() {
    int N,rank,i;
    char fx,c;
    headNode* L;
    L = (headNode*)malloc(sizeof(headNode));
    L->head = NULL;
    if (L == NULL) {
        printf("Not enough memory!");
        return -1;
    }
    scanf("%d", &N);
    getchar();

    for (i = 0; i < N; i++) {
        scanf("%c",&fx);        //scanf후 getchar()은 걍 습관화하셈(불필요한거 줄일거면 앞뒤 참조문자 잘 보고)
        switch (fx) {
        case 'A': 
            scanf("%d %c", &rank, &c);
            getchar();
            add(L, rank, c);
            break;
        case 'D': 
            scanf("%d", &rank);
            getchar();
            delete(L, rank);
             break;
        case 'G': 
            scanf("%d", &rank);
            getchar();
            get(L, rank);
             break;
        case 'P': 
            getchar();
            print(L);
            break;
        default:
            getchar();
            printf("What did you do??\n");
            break;
        }
    }

    return 0;
}

void add(headNode* list, int r, char e) {

    listNode* tmp,*new;
    int cnt = 1;
    new = (listNode*)malloc(sizeof(listNode));
    if (new == NULL) {
        printf("Not enough memory!\n");
        return -1;
    }
    new->rlink = new->llink = NULL;
    new->ch = e;


    if (list->head == NULL) {
        //여기서 tmp=list->head 하고 tmp=NULL했다고 list->head도 NULL초기화 했다는 이상한 망상 조심
        //(a=b하고 a=c했다고 b가 c가 됐다는 거랑 똑같은 말임. 포인터가 주소 참조한다고 헛짓거리로 헷갈리면 x)
        list->head = new;
        return;
    }

    tmp = list->head;
    while (tmp->rlink != NULL && cnt<r) {   //기본적인, 딱 원하는 위치까지 tmp가 가는 반복문(잘 기억 ★)
        tmp = tmp->rlink;
        cnt++;
    }


    if (cnt < r-1) {    
        printf("invalid position\n");
        return;
    }
    else {
        if (cnt == r - 1) {
            tmp->rlink = new;
            new->llink = tmp;
        }
        else {
            if (r == 1) {
                new->llink = list->head;
                list->head = new;
                new->rlink = tmp;
                tmp->llink = new;
            }
            else {
                tmp = tmp->llink;

                new->rlink = tmp->rlink;    //new에 먼저 길을 열어둬라
                new->llink = tmp;
                tmp->rlink = new;
                new->rlink->llink = tmp;
            }
        }
    }

}
void delete(headNode* list, int r) {
    listNode* tmp;
    int cnt = 1;
    tmp = NULL;


    
    if (list->head == NULL) {      //tmp->rlink!= NULL인거랑 완전히 다른 경우(기본)
        printf("invalid position\n");
        return;
    }

    tmp = list->head;
    while (tmp->rlink != NULL && cnt<r) {   
        tmp = tmp->rlink;
        cnt++;
    }
    if (cnt < r) {
        printf("invalid position\n");
        return -1;
    }
    else {
        if (tmp->rlink == NULL) {
            if (cnt > 1) {
                printf("cnt = %d\n", cnt);
                printf("tmp = %p\n", tmp);
                printf("tmp->llink = %p\n", tmp->llink);
                printf("tmp->llink->rlink=%p\n", tmp->llink->rlink);
                tmp->llink->rlink = NULL;
                printf("tmp->llink->rlink=%p 2\n", tmp->llink->rlink);
                free(tmp);
            }
            else {
                list->head = NULL;
                free(tmp);
            }
        }
        else {
            if (r == 1) {
                list->head = tmp->rlink;
                tmp->rlink->llink = NULL;
                free(tmp);
            }
            else {
                printf("중간일 경우\n");
                tmp->rlink->llink = tmp->llink;
                tmp->llink->rlink = tmp->rlink;
                free(tmp);
            }
        }
        return;
    }
}
void get(headNode* list, int r) {
    listNode* tmp;
    int cnt = 1;


    if (list->head == NULL) {      //tmp->rlink!= NULL인거랑 완전히 다른 경우(기본)
        printf("invalid position\n");
        return;
    }

    tmp = list->head;
    while (tmp->rlink != NULL && cnt < r) {
        tmp = tmp->rlink;
        cnt++;
    }
    if (cnt < r) {
        printf("invalid position\n");
        return;
    }
    else
        printf("%c\n", tmp->ch);

}
void print(headNode* list) {
    listNode* tmp;
    tmp = list->head;
    if (tmp == NULL) {
        printf("invalid position\n");
        return;
    }
    while (tmp!=NULL) {
        printf("%c\n", tmp->ch);
        printf("%p\n",tmp);
        tmp = tmp->rlink;
    }
    printf("\n");
}
//printf문으로 조사할 때 010 020도 좋은데 너무 많아지면 그냥 "변수 = " 넣기(확실하게!)
//리스트의 경우의 수는 처음, 중간, 끝(아무리 횟수고 뭐고 조건이 짜잘하게 붙어도 이 3가지만 제일 기본적으로 깔고가면 헷갈릴 여지 없음)
//printf문으로 조사할 때 010 020도 좋은데 너무 많아지면 그냥 "변수 = " 넣기(확실하게!)
//리스트의 경우의 수는 처음, 중간, 끝(아무리 횟수고 뭐고 조건이 짜잘하게 붙어도 이 3가지만 제일 기본적으로 깔고가면 헷갈릴 여지 없음)


1번 예시 :
9
A 1 D
A 2 a
A 3 y
D 1
P
G 3
A 1 S
P
G 3


5
A 1 t
A 2 a
A 3 x
D 2
P

5
A 1 S
A 2 t
A 3 r
A 3 a
P

2
A 1 t
P

1000
A 1 D
A 2 a
A 3 y
P
A 3 k
P
A 4 k
P
A 6 t
P
A 6 W
P
A 5 k
P
A 1 R
P
D 1
D 1
D 1
D 1
P
A 5 W
P
A 7 T
P
G 7
G 6
G 5
G 4
D 4
A 8 d
D 2
P


1000
A 1 a
A 2 b
A 3 c
A 4 d
A 5 e
A 6 f
A 7 g
A 8 h
A 9 i
P
D 4
D 2
P
A 7 W
P
D 4
D 2
P
D 4
D 2
P
D 1
P
D 1
P
D 2
P


100
A 1 t
D 1
P

A 2 k
A 1 t
P
tk
D 1
D 1
P

A 2 k
P
k
1번 2회차
#include <stdio.h>
#include <stdlib.h>
#pragma warning(disable:4996)
typedef struct ListNode {
    char ch;
    struct ListNode* llink,* rlink;   
}listNode;

typedef struct HeadNode {
    struct listNode* head;
}headNode;

void add(headNode* list, int r, char e);
void delete(headNode* list, int r);
void get(headNode* list, int r);
void print(headNode* list);


int main() {
    int N,rank,i;
    char fx,c;
    headNode* L;
    L = (headNode*)malloc(sizeof(headNode));
    L->head = NULL;
    if (L == NULL) {
        printf("Not enough memory!");
        return -1;
    }
    scanf("%d", &N);
    getchar();

    for (i = 0; i < N; i++) {
        scanf("%c",&fx);        //scanf후 getchar()은 걍 습관화하셈(불필요한거 줄일거면 앞뒤 참조문자 잘 보고)
        getchar();
        switch (fx) {
        case 'A': 
            scanf("%d %c", &rank, &c);
            getchar();
            add(L, rank, c);
            break;
        case 'D': 
            scanf("%d", &rank);
            getchar();
            delete(L, rank);
             break;
        case 'G': 
            scanf("%d", &rank);
            getchar();
            get(L, rank);
             break;
        case 'P': 
            print(L);
            break;
        default:
            printf("What did you do??\n");
            break;
        }
    }

    return 0;
}

void add(headNode* list, int r, char e) {
    listNode* tmp, * new;
    int cnt = 1;
    tmp = NULL;
    new = (listNode*)malloc(sizeof(listNode));
    if (new == NULL) {
        printf("Not enough Meomory!\n");
        return -1;
    }
    new->llink = new->rlink = NULL;
    new->ch = e;

    if (list->head == NULL) {
        list->head = new;
        return;
    }
    


    tmp = list->head;
    while (tmp->rlink != NULL && cnt<r) {
        tmp = tmp->rlink;
        cnt++;
    }

    printf("cnt = %d\n", cnt);

    if (r > cnt + 1) {
        printf("invalid position\n");
        return;
    }
    else {
        if (tmp->rlink == NULL) {
            if (r == 1) {
                new->rlink = tmp;
                tmp->llink = new;

                list->head = new;
            }
            else {
                new->llink = tmp;
                tmp->rlink = new;
            }
        }
        else {
            if (r == 1) {
                new->rlink = tmp;
                tmp->llink = new;

                list->head = new;
            }
            else {
                tmp = tmp->llink;

                new->llink = tmp;
                new->rlink = tmp->rlink;
                tmp->rlink = new;
                new->rlink->llink = new;
            }
        }
    }
}
void delete(headNode* list, int r) {
    listNode* tmp;
    int cnt = 1;

    if (list->head == NULL)
        return;
    

    tmp = list->head;
    while (tmp->rlink != NULL && cnt < r) {
        tmp = tmp->rlink;
        cnt++;
    }
    if (cnt < r) {
        printf("invalid position\n");
        return;
    }
    else {
        if (tmp->rlink == NULL) {
            if (r == 1) {
                list->head = NULL;
                free(tmp);
            }
            else {
                tmp->llink->rlink = NULL;
                free(tmp);
            }
        }
        else {
            if (r == 1) {
                list->head = tmp->rlink;
                tmp->rlink->llink = NULL;
                free(tmp);
            }
            else {
                tmp->llink->rlink = tmp->rlink;
                tmp->rlink->llink = tmp->llink;
                free(tmp);
            }
        }
    }
}
void get(headNode* list, int r) {
    listNode* tmp = NULL;
    int cnt = 1;

    if (list->head == NULL)
        return;

    tmp = list->head;
    while (tmp->rlink != NULL && cnt < r) {
        tmp = tmp->rlink;
        cnt++;
    }

    if (cnt < r) {
        printf("invalid position\n");
        return;
    }
    else {
        printf("%c\n", tmp->ch);
    }
}
void print(headNode* list) {
    listNode* tmp=NULL;

    tmp = list->head;
    while (tmp != NULL) {   //반복문 ==, != 조심하고 + print할 때는 tmp->rlink가 아닌 tmp로 조건문 넣기
        printf("tmp->llink = %p  tmp = %p  tmp->rlink = %p / %c\n",tmp->llink, tmp, tmp->rlink, tmp->ch);
        tmp = tmp->rlink;
    }
    printf("\n");
}





1번 일단 100점 (예외 하나하나 다 찾기 성공)
//아니 근데 if r=3 cnt=2이고 tmp가 r번째까지 간다면 tmp=NULL인데 왜 tmp->llink가 되는 거임?(수환코드, 교재 참고)
#include <stdio.h>
#include <stdlib.h>
#pragma warning(disable:4996)
typedef struct ListNode {
    char ch;
    struct ListNode* llink,* rlink;
}listNode;

typedef struct HeadNode {
    struct listNode* head;
}headNode;

void add(headNode* list, int r, char e);
void delete(headNode* list, int r);
void get(headNode* list, int r);
void print(headNode* list);


int main() {
    int N,rank,i;
    char fx,c;
    headNode* L;
    L = (headNode*)malloc(sizeof(headNode));
    L->head = NULL;	//구조체 동적할당과 동시에 멤버변수들 초기화 췤
    if (L == NULL) {
        printf("Not enough memory!");
        return -1;
    }
    scanf("%d", &N);
    getchar();

    for (i = 0; i < N; i++) {
        scanf("%c",&fx);        //scanf후 getchar()은 걍 습관화하셈(불필요한거 줄일거면 앞뒤 참조문자 잘 보고)
        getchar();
        switch (fx) {		//switch구문 이제 좀 외워보고
        case 'A': 
            scanf("%d %c", &rank, &c);
            getchar();
            add(L, rank, c);
            break;
        case 'D': 
            scanf("%d", &rank);
            getchar();
            delete(L, rank);
             break;
        case 'G': 
            scanf("%d", &rank);
            getchar();
            get(L, rank);
             break;
        case 'P': 
            print(L);
            break;
        default:
            printf("What did you do??\n");
            break;
        }
    }
    free(L);		//main함수에서 할당한건 해제해줘야지
    return 0;
}

void add(headNode* list, int r, char e) {
    listNode* tmp, * new;
    int cnt = 1;
    tmp = NULL;
    new = (listNode*)malloc(sizeof(listNode));
    if (new == NULL) {
        printf("Not enough Meomory!\n");
        return -1;
    }
    new->llink = new->rlink = NULL;
    new->ch = e;

    if (list->head == NULL) {		//기본적인 케이스(등록된 노드가 없을 경우) 안에서 문제에 따른 특수한 예외조건 생각해보기
        if (r == 1) {			
            list->head = new;
            return;
        }
        else {
            printf("invalid position\n");
            return;
        }
    }
    	//아니면 헤더구조체에 cnt 함 추가해보던가. 헤더구조체 안의 변수가 뭔지는 그렇게 안 중요한 것 같다
    


    tmp = list->head;			//특수한 경우(실습 2번) 아니면 tmp는 무조건 list->head(next)로 시작
    while (tmp->rlink != NULL && cnt<r) {	//조사하는 건 그냥 tmp!=NULL보단 tmp->rlink가 맞는 것 같다(실습에도 그리 나와있고)
        tmp = tmp->rlink;			//특정 순번이면 for문도 활용해보기 (tmp->rlink != NULL 조건이 들어간)
        cnt++;
    }

    if (r > cnt + 1) {			//cnt를 미리 해놓으면 이거 줄일 수 있음
        printf("invalid position\n");
        return;
    }
    else {
        if (tmp->rlink == NULL) {		//우선 '다음 노드가 있냐/없냐 => 처음, 중간, 끝'에 대한 상황으로 6가지 조건 생각해보기
            if (r == 1) {			//아니면 별다른 조건문 없이 풀 수 있나..? 수환코드 확인
                new->rlink = tmp;
                tmp->llink = new;

                list->head = new;
            }
            else if (r == cnt) {
                tmp = tmp->llink;

                new->llink = tmp;
                new->rlink = tmp->rlink;
                tmp->rlink = new;
                new->rlink->llink = new;
            }
            else {
                new->llink = tmp;
                tmp->rlink = new;
            }
        }
        else {
            if (r == 1) {
                new->rlink = tmp;
                tmp->llink = new;

                list->head = new;
            }
            else {
                tmp = tmp->llink;

                new->llink = tmp;
                new->rlink = tmp->rlink;
                tmp->rlink = new;
                new->rlink->llink = new;
            }
        }
    }
}
void delete(headNode* list, int r) {
    listNode* tmp;
    int cnt = 1;

    if (list->head == NULL) {
        printf("invalid position\n");
        return;
    }
    

    tmp = list->head;
    while (tmp->rlink != NULL && cnt < r) {	//add와 마찬가지
        tmp = tmp->rlink;
        cnt++;
    }
    if (cnt < r) {				//cnt와 r관계가 add와 다른 점 참고!
        printf("invalid position\n");
        return;
    }
    else {
        if (tmp->rlink == NULL) {		//얘도 마찬가지. 우선 다음노드가 있냐 없냐 이후 위치조건으로 판별
            if (r == 1) {
                list->head = NULL;
                free(tmp);
            }
            else {
                tmp->llink->rlink = NULL;
                free(tmp);
            }
        }
        else {
            if (r == 1) {
                list->head = tmp->rlink;
                tmp->rlink->llink = NULL;
                free(tmp);
            }
            else {
                tmp->llink->rlink = tmp->rlink;
                tmp->rlink->llink = tmp->llink;
                free(tmp);
            }
        }
    }
}
void get(headNode* list, int r) {
    listNode* tmp = NULL;
    int cnt = 1;

    if (list->head == NULL) {
        printf("invalid position\n");
        return;
    }

    tmp = list->head;
    while (tmp->rlink != NULL && cnt < r) {
        tmp = tmp->rlink;
        cnt++;
    }

    if (cnt < r) {
        printf("invalid position\n");
        return;
    }
    else {
        printf("%c\n", tmp->ch);
    }
}
void print(headNode* list) {
    listNode* tmp=NULL;

    tmp = list->head;
    while (tmp != NULL) {   //출력할 때는 주로 tmp!=NULL활용
        printf("%c",tmp->ch);
        tmp = tmp->rlink;
    }
    printf("\n");
}

//if문 복잡하게 안 쓰고 모든 경우에 대해 알고리즘 하나로 처리하기
// 공백리스트인 경우, 삽입/삭제가 불가능한 위치일 경우, 그게 아닌 경우(여기서 다음 노드가 있냐 없냐 까지 해서ㅇㅇ)
//printf("tmp->llink = %p  tmp = %p  tmp->rlink = %p / %c\n",tmp->llink, tmp, tmp->rlink, tmp->ch);



2번 (printf 추가문)
#include <stdio.h>
#include <stdlib.h>
#pragma warning(disable:4996)
typedef struct ListNode {
    int coef, exp;
    struct ListNode* link;     //여기다가 'listNode*라고 쓰면 대참사 남. tmp->llink->rlink 안 써짐. 아직 def 하기도 전인데 listNode라고 쓰면 어떡하니??
}listNode;


listNode* getnode();
listNode* appendTerm(listNode*k, int c, int e);
listNode* addPoly(listNode* x, listNode* y);

int main() {
    listNode* A, *At, * B, *Bt,* C,*Ct;
    int N1,N2,Cf,Ex;
    A = B = C = NULL;
    At = Bt = Ct = NULL;

    scanf("%d", &N1);
    A = (listNode*)malloc(sizeof(listNode));
    if (A == NULL) {
        printf("Not enough memory!\n");
        return -1;
    }


    At = A;
    for (int i = 0; i < N1; i++) {
        scanf("%d %d", &Cf, &Ex);
        At = appendTerm(At, Cf, Ex);
        printf("At = %d, %p\n", At->coef, At);
    }



    scanf("%d", &N2);
    B = (listNode*)malloc(sizeof(listNode));
    if (B == NULL) {
        printf("Not enough memory!\n");
        return -1;
    }


    Bt = B;
    for (int i = 0; i < N2; i++) {
        scanf("%d %d", &Cf, &Ex);
        Bt = appendTerm(Bt, Cf, Ex);
    }
    printf("010\n");

    At = A->link;
    Bt = B->link;

    while (At != NULL) {
        printf("A : %d\n", At->coef);
        At = At->link;
    }

    At = A;
    Bt = B;
    C = addPoly(At, Bt);

    Ct = C->link;
    while (Ct!= NULL) {
        printf(" %d %d", Ct->coef,Ct->exp);
        Ct = Ct->link;
    }


    return 0;
}

listNode* getnode() {
    listNode* new = (listNode*)malloc(sizeof(listNode));    //선언과 동시에 할당
    if (new == NULL) {
        printf("Not enough memory!\n");
        return;
    }
    new->coef = new->exp = 0;
    new->link = NULL;

    return new;
}
listNode* appendTerm(listNode* k, int c, int e) {
    listNode* t = getnode();
    t->coef = c;
    t->exp = e;
    t->link = NULL;
    k->link = t;
    k = t;
    printf("t : %d %d / k = %p\n", k->coef, k->exp,k);
    return k;
}
listNode* addPoly(listNode* x, listNode* y) {
    listNode* result,*i,*j,*k;
    int sum = 0;
    i = j = k = NULL;
    result = getnode();
    result->link = NULL;

    i = x->link;
    j = y->link;
    k = result;
    while ((i != NULL) & (j != NULL)) {
        if (i->exp > j->exp) {
            k=appendTerm(k, i->coef, i->exp);
            i = i->link;
        }
        else if (i->exp < j->exp) {
            k=appendTerm(k, j->coef, j->exp);
            j = j->link;
        }
        else {
            sum = i->coef + j->coef;
            if (sum != 0)
                k=appendTerm(k, sum, i->exp);
            i = i->link;
            j = j->link;
        }
    }
    while (i != NULL) {
        appendTerm(k, i->coef, i->exp);
        i = i->link;
    }
    while (j != NULL) {
        appendTerm(k, j->coef, j->exp);
        j = j->link;
    }
    return result;

}


2번 (깔끔문 + 주석문)
#include <stdio.h>
#include <stdlib.h>
#pragma warning(disable:4996)
typedef struct ListNode {
    int coef, exp;
    struct ListNode* link;
}listNode;


listNode* getnode();
listNode* appendTerm(listNode*k, int c, int e);
listNode* addPoly(listNode* x, listNode* y);

int main() {
    listNode* A, *At, * B, *Bt,* C,*Ct;		//각 다항식에 대해 훑어볼 tmp 포인터변수들 췤.
					//다항식 등 여러 리스트가 나오는 문제라면 해당 리스트의 헤더포인터와 매개포인터 따로 생각.
					//실수로 헤더포인터를 직접 next시켜서 옮겨버리는 짓 하지말고
    int N1,N2,Cf,Ex;
    A = B = C = NULL;
    At = Bt = Ct = NULL;

    scanf("%d", &N1);
    A = (listNode*)malloc(sizeof(listNode));	//헤더구조체가 따로 선언된게 아니더라도 헤더역할을 한다면 당연히 동적할당 시작
    if (A == NULL) {
        printf("Not enough memory!\n");
        return -1;
    }


    At = A;			//여기가 특수한 경우 => A->link가 아닌 A인 이유는 함수자체가 특이하기 때문. 
				//함수에서 노드추가가 있다면 함수의 특성을 잘 파악하고 매개포인터에 A->link를 넣을지 A자체를 넣을지 판단
    for (int i = 0; i < N1; i++) {
        scanf("%d %d", &Cf, &Ex);
        At = appendTerm(At, Cf, Ex);
    }



    scanf("%d", &N2);
    B = (listNode*)malloc(sizeof(listNode));
    if (B == NULL) {
        printf("Not enough memory!\n");
        return -1;
    }


    Bt = B;
    for (int i = 0; i < N2; i++) {
        scanf("%d %d", &Cf, &Ex);
        Bt = appendTerm(Bt, Cf, Ex);
    }


    At = A;
    Bt = B;
    C = addPoly(At, Bt);

    Ct = C->link;		//출력할 땐 당연히 C->link로 받아야지(위의 내용 토대로 기본)
    while (Ct!= NULL) {
        printf(" %d %d", Ct->coef,Ct->exp);
        Ct = Ct->link;
    }


    return 0;
}

listNode* getnode() {
    listNode* new = (listNode*)malloc(sizeof(listNode));    //선언과 동시에 할당
    if (new == NULL) {
        printf("Not enough memory!\n");
        return;
    }
    new->coef = new->exp = 0;	//구조체 동적할당과 동시에 초기화
    new->link = NULL;

    return new;		//getNode함수 이거 맞으니까 의심치 말고ㄱㄱ
}
listNode* appendTerm(listNode* k, int c, int e) {
    listNode* t = getnode();
    t->coef = c;
    t->exp = e;
    t->link = NULL;
    k->link = t;
    k = t;
    return k;	//내 이럴줄 알았다. 지역포인터변수에서 주소값을 초기화해봤자 뭐하냐 함수끝나면 사라지는데.
		//k->link=t는 k가 참조하고있는 변수(포인터)를 초기화한 거라 메모리에서 값이 바뀐거지만,
		//k=t는 지역변수 본인의 값을 바꾸려고 하는거니까 당연히 안 되지..l-value의 변화는 참조여부를 판단할 것**
		//so return값이 있어야 하는 것이었음(문제지 예시가 훼이크)
}
listNode* addPoly(listNode* x, listNode* y) {
    listNode* result,*i,*j,*k;
    int sum = 0;
    i = j = k = NULL;
    result = getnode();
    result->link = NULL;

    i = x->link;	//"특수한 경우" 그냥 At=A받고 시작하는 이유가 함수 안에서 At->link로 깔고 시작할 것이기 때문
    j = y->link;
    k = result;
    while ((i != NULL) & (j != NULL)) {
        if (i->exp > j->exp) {
            k=appendTerm(k, i->coef, i->exp);
            i = i->link;
        }
        else if (i->exp < j->exp) {
            k=appendTerm(k, j->coef, j->exp);
            j = j->link;
        }
        else {
            sum = i->coef + j->coef;
            if (sum != 0)
                k=appendTerm(k, sum, i->exp);
            i = i->link;
            j = j->link;
        }
    }			//다항식 알고리즘 잘 파악(다시 풀어보면서, 큰 차수쪽의 계수와 차수를 그대로 추가 등등의 알고리즘)
    while (i != NULL) {
        appendTerm(k, i->coef, i->exp);
        i = i->link;
    }
    while (j != NULL) {
        appendTerm(k, j->coef, j->exp);
        j = j->link;
    }
    return result;

}




예시
3
5 3 3 2 3 1
3
2 6 2 3 1 0