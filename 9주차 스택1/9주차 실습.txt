1번
#include <stdio.h>
#include <stdlib.h>
#pragma warning(disable:4996)

int top = -1;
int STACK_SIZE;

void push(char stack[], char c);
char pop(char stack[]);
char peek(char stack[]);
void duplicate(char stack[]);
void upRotate(char stack[], int n);
void downRotate(char stack[], int n);
void print(char stack[]);

int main()
{
	int N,n;
	char stack[100], tmp[10], ch,rt;
	scanf("%d %d", &STACK_SIZE,&N);
	getchar();
	for (int i = 0; i < N; i++) {
		scanf("%s", tmp);
		getchar();
		if (strcmp(tmp, "POP") == 0) {
			rt = pop(stack);
		}
		else if (strcmp(tmp, "PUSH") == 0) {
			scanf("%c",&ch);
			getchar();
			push(stack, ch);
		}
		else if (strcmp(tmp, "PEEK") == 0)
			peek(stack);

		else if (strcmp(tmp, "DUP") == 0)
			duplicate(stack);

		else if (strcmp(tmp, "UpR") == 0) {
			scanf("%d", &n);
			getchar();
			upRotate(stack, n);
		}

		else if (strcmp(tmp, "DownR") == 0) {
			scanf("%d", &n);
			getchar();
			downRotate(stack, n);
		}
		
		else if (strcmp(tmp, "PRINT") == 0) 
			print(stack);
		
	}

	return 0;
}
void push(char stack[], char c) {
	if (top >= STACK_SIZE-1) {
		printf("Stack FULL\n");
		return;
	}
	
	else stack[++top] = c;
}
char pop(char stack[]) {
	if (top == -1) {
		printf("Stack Empty\n");
		return;
	}
	
	return stack[top--];
}
char peek(char stack[]) {
	if (top == -1) {	
		printf("Stack Empty\n");
		return;
	}
	printf("%c\n", stack[top]);
	return stack[top];
}
void duplicate(char stack[]) {
	if (top == -1)
		return;
	char ch = pop(stack);
	for (int i = 0; i < 2; i++) {
		if (top >= STACK_SIZE-1) {
			printf("Stack FULL\n");
			return;
		}
		push(stack, ch);
	}
}
void upRotate(char stack[], int n) {
	char tmp, tmp_top;
	if (n - 1 > top)
		return;

	tmp_top = stack[top];
	for (int i = top; i > top-n+1; i--) 
		stack[i] = stack[i - 1];
	
	stack[top - n + 1] = tmp_top;
}
void downRotate(char stack[], int n) {
	char tmp, tmp_bottom;
	if (n - 1 > top)
		return;

	tmp_bottom = stack[top-n+1];
	for (int i = top - n + 1; i < top; i++)
		stack[i] = stack[i + 1];

	stack[top] = tmp_bottom;
}
void print(char stack[]) {
	for (int i = top; i >= 0; i--)
		printf("%c", stack[i]);
	printf("\n");
}



3
5
PUSH d
DUP
PUSH a
PRINT
PUSH s


2번
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#pragma warning(disable:4996)
#define STACK_SIZE 100

int top = -1;

void push(char stack[], char c);
char pop(char stack[]);

int main()
{
	char arr[1000], stack[STACK_SIZE],ch;	//전역변수라도 배열 선언할 때 []안에 변수 못 넣음. 단 define한 상수는 가능
	int arr_len;
	int cnt, f;
	cnt = f = 0;
	gets(arr);	//scanf %s는 공백포함 안 됨 => string.h의 gets함수 활용 + gets는 버퍼에서 \n을 \0으로 바꿔줌.
				//즉, 개행문자 반환 안함(scanf %s와 달리)
	arr_len = strlen(arr);

	for (int i = 0; i < arr_len; i++) {
		if (arr[i] == '(' || arr[i] == '{' || arr[i] == '[') {
			cnt++;
			push(stack, arr[i]);
		}
		else if (arr[i] == ')' || arr[i] == '}' || arr[i] == ']') {
			cnt++;
			if (top != -1) {	//스택에 데이터가 남아있는 경우를 main함수 안에서도 확인(이런 특이한 알고리즘의 변환법에선)
				ch = pop(stack);
				if (ch == '(') {
					if (arr[i] != ')')
						f = 1;	//플래그 적극 활용
				}
				else if (ch == '{') {
					if (arr[i] != '}')
						f = 1;
				}
				else if (ch == '[') {
					if (arr[i] != ']')
						f = 1;
				}
			}
			else
				f = 1;
		}
	}
	if (f == 0 && top==-1)	//마지막까지 스택 내 데이터 여부 확인
		printf("OK_%d", cnt);
	else	// + 스택에 괄호가 남아있는 경우(데이터가 남아있는 경우도 계산)
		printf("Wrong_%d", cnt);

	return 0;
}
void push(char stack[], char c) {
	if (top >= STACK_SIZE-1) {
		return;
	}
	else stack[++top] = c;
}
char pop(char stack[]) {
	if (top == -1) {
		return;
	}
	return stack[top--];
}
