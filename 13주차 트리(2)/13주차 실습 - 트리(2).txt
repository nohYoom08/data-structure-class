1번
#pragma warning(disable:4996)

#include  <stdio.h>
#include  <string.h>
#include  <stdlib.h>

typedef struct treeNode {
    int id;
    int data;
    struct treeNode* left;
    struct treeNode* right;
}treeNode;

treeNode* makeRootNode(int id, int data, treeNode* leftNode, treeNode* rightNode)
{
    treeNode* root = (treeNode*)malloc(sizeof(treeNode));
    root->id = id;
    root->data = data;
    root->left = leftNode;
    root->right = rightNode;
    return root;
}



void preOrder(treeNode* node) {
    if (node == NULL)
        return;

    printf(" %d", node->data);
    preOrder(node->left);
    preOrder(node->right);
}

void inOrder(treeNode* node) {
    if (node == NULL)
        return;

    inOrder(node->left);
    printf(" %d", node->data);
    inOrder(node->right);
}

void postOrder(treeNode* node) {
    if (node == NULL)
        return;

    postOrder(node->left);
    postOrder(node->right);
    printf(" %d", node->data);
}


void Seek(treeNode* node, int m_id, int n) {	//정렬되어있지 않고 id로만 탐색해야하는 노드는 함수 안에서 순회를 해야함(반환같은 거 안됨)

    if (node == NULL)
        return;

    if (node->id == m_id) {
        switch (n) {
        case 1:
            preOrder(node);
            break;
        case 2:
            inOrder(node);
            break;
        case 3:
            postOrder(node);
            break;
        default:
            break;
        }
    }

    else {
        Seek(node->left, m_id, n);
        Seek(node->right, m_id, n);
    }

}


void main()
{
    treeNode* F8 = makeRootNode(8, 80, NULL, NULL);
    treeNode* F7 = makeRootNode(7, 130, NULL, NULL);
    treeNode* F6 = makeRootNode(6, 120, F7, F8);
    treeNode* F5 = makeRootNode(5, 90, NULL, NULL);
    treeNode* F4 = makeRootNode(4, 70, NULL, NULL);
    treeNode* F3 = makeRootNode(3, 50, NULL, F6);
    treeNode* F2 = makeRootNode(2, 30, F4, F5);
    treeNode* F1 = makeRootNode(1, 20, F2, F3);

    int N, M;
    scanf("%d %d", &N, &M);
    
    if (M < 9)
        Seek(F1, M, N);
    else
        printf("-1");
}



2번
#pragma warning(disable:4996)

#include  <stdio.h>
#include  <string.h>
#include  <stdlib.h>

int sum;
typedef struct treeNode {
    int id;
    int data;
    struct treeNode* left;
    struct treeNode* right;
}treeNode;

treeNode* makeRootNode(int id, int data, treeNode* leftNode, treeNode* rightNode)
{
    treeNode* root = (treeNode*)malloc(sizeof(treeNode));
    root->id = id;
    root->data = data;
    root->left = leftNode;
    root->right = rightNode;
    return root;
}



void preOrder(treeNode* node) {
    if (node == NULL)
        return;

    sum += node->data;
    preOrder(node->left);
    preOrder(node->right);
}

void inOrder(treeNode* node) {
    if (node == NULL)
        return;

    inOrder(node->left);
    sum += node->data;
    inOrder(node->right);
}

void postOrder(treeNode* node) {
    if (node == NULL)
        return;

    postOrder(node->left);
    postOrder(node->right);
    sum += node->data;
}


void Seek(treeNode* node, int m_id) {

    if (node == NULL)
        return;

    if (node->id == m_id) 
            preOrder(node);


    else {
        Seek(node->left, m_id);
        Seek(node->right, m_id);
    }

}


void main()
{
    treeNode* F8 = makeRootNode(8, 80, NULL, NULL);
    treeNode* F7 = makeRootNode(7, 130, NULL, NULL);
    treeNode* F6 = makeRootNode(6, 120, F7, F8);
    treeNode* F5 = makeRootNode(5, 90, NULL, NULL);
    treeNode* F4 = makeRootNode(4, 70, NULL, NULL);
    treeNode* F3 = makeRootNode(3, 50, NULL, F6);
    treeNode* F2 = makeRootNode(2, 30, F4, F5);
    treeNode* F1 = makeRootNode(1, 20, F2, F3);

    int N;
    sum = 0;
    scanf("%d", &N);
    
    if (N < 9) {
        Seek(F1, N);
        printf("%d", sum);
    }
    else
        printf("-1");
}