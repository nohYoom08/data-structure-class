4번은 재귀로 함 다시 풀어보고,
5번은 4번의 커서 알고리즘 활용해서 다시 풀어볼 것.



1번
#pragma warning (disable:4996)
#include <stdio.h>
#include <stdlib.h>
#include <string.h>


int main() {
	int X[100];
	int N,M,i,j,tmp,cnt,a,b;
	
	scanf("%d", &N); 

	for (i = 0; i < N; i++)
		scanf("%d", &X[i]);

	scanf("%d", &M);

	for (i = 0; i < M; i++) {
		scanf("%d %d", &a, &b);		//%d%d => 스페이스나 엔터로 넘어가짐 / "%d %d" 무조건 스페이스바로만 넘겨야함(여기서 입력오류가 있었음)
		cnt = 0;
		for (j = a; j <= a+(b-a)/2; j++) {
			tmp = X[j];-+

			X[j] = X[b - cnt];
			X[b - cnt] = tmp;
			cnt++;
		}
	}


	for (i = 0; i < N; i++)
		printf(" %d", X[i]);
}



2번
#pragma warning (disable:4996)
#include <stdio.h>
#include <stdlib.h>
#include <string.h>


int main() {
	int X[100];
	int N,M,i,j,tmp,a1,a2;
	
	scanf("%d", &N);

	for (i = 0; i < N; i++)
		scanf("%d", &X[i]);

	scanf("%d", &M);

	for (i = 0; i < M; i++) {
		scanf("%d", &a2);		
		if (i == 0) {
			a1 = a2;
			continue;
		}
		

			tmp = X[a1];
			X[a1] = X[a2];
			X[a2] = tmp;

	}


	for (i = 0; i < N; i++)
		printf(" %d", X[i]);
}



3번
#pragma warning (disable:4996)
#include <stdio.h>
#include <stdlib.h>
#include <string.h>


int main() {
	int X[100][100];
	int N, M, i, j, cnt;
	
	scanf("%d", &N);

	cnt = 1;
	for (i = 0; i < N; i++) {
		if ((i+1) % 2 != 0)
			for (j = 0; j < N; j++)
				X[i][j] = cnt++;

		else
			for (j = N-1; j >= 0; j--)
				X[i][j] = cnt++;
	}
	
	for (i = 0; i < N; i++) {
		for (j = 0; j < N; j++)
			printf(" %d", X[i][j]);
		printf("\n");
	}

	
}



4번
#pragma warning (disable:4996)
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main() {
	int X[100][100];
	int N, M, i, j, x, y, size, cnt, n, m;

	scanf("%d %d", &N, &M);
	size = N + M - 1;


	n = N;
	m = M;
	x = 0;
	y = 0;
	cnt = 1;
	while (n > 0 && m > 0) {
		for (i = 0; i < m; i++)
			X[y][x++] = cnt++;
		x--;
		y++;
		n--;

		for (i = 0; i < n; i++)
			X[y++][x] = cnt++;
		y--;
		x--;
		m--;

		if (m <= 0 || n <= 0)		//조건문의 조건 잘 파악. 괜히 n-2 따라가겠다고 하다가 m-1에서 걸려서 세번째 조건문 실행 안 될 수도 있음
						//(달팽이 배열 문제 특성상 그러한 것. 문제별로 중간종료조건 잘 생각)
			break;

		for (i = 0; i < m; i++)
			X[y][x--] = cnt++;
		y--;
		x++;
		n--;

		for (i = 0; i < n; i++)
			X[y--][x] = cnt++;
		x++;
		y++;
		m--;
	}

	for (i = 0; i < N; i++) {
		for (j = 0; j < M; j++)
			printf(" %d", X[i][j]);
		printf("\n");
	}
}
//배열의 규칙을 찾아서 과정을 잘 분할하고, 그 규칙에서 개수를 잘 파악할 것. 
i와 j를 통해서 X[i][j]를 직접 초기화시키겠다는 것보다 여기서 i와 j는 그저 포인터(커서)마냥 실행횟수만큼만 따라가는 것. 인덱스에 직접적으로 관여 x
X[y][x], x+-, y+-를 통해서 원소자체를 이동시키면서 대입시키는 알고리즘 o 




5번	// 어떤 변수를 써야하는 지 잘 살펴보고 + i,j에 해당하는 k r과 N,M 헷갈려서 범위 실수하지 말 것 => 위의 4번 알고리즘 잘 생각하면서ㅇㅇ
#pragma warning (disable:4996)
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main() {
	int X[100][100];
	int N, M, i, j, k,r, cnt = 1;
	
	scanf("%d %d", &N,&M);

	j = 1;
	for (i = 0; i < N + M - 1; i++) {
		if (i < M) {
			for (k = 0, r = i; k < N && r >= 0; k++, r--)
				X[k][r] = cnt++;
		}
	
		else {
			for (k = j, r = M- 1; k < N && r >= 0; k++, r--) {
				X[k][r] = cnt++;
			}
			j++;
		}
	}

	printf("\n");

	for (i = 0; i < N; i++) {
		for (j = 0; j < M; j++)
			printf(" %d", X[i][j]);
		printf("\n");
	}
	
}