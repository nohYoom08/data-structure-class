1번
#include <stdio.h>
#include <stdlib.h>
#pragma warning(disable:4996)
typedef struct ListNode {
	struct ListNode* link;
	int num;
}listNode;


listNode* getNode();
listNode* appendTerm(listNode* k, int n);
int subset(listNode* A, listNode* B);

int main()
{
	int N_A, N_B,temp;
	listNode* A, * B, * At, * Bt;
	A = B = At = Bt = NULL;


	scanf("%d", &N_A);
	
	if (N_A != 0) {
		scanf("%d", &temp);
		A = appendTerm(A, temp);		//별 수 없다 헤더노드 없으면 그냥 이렇게 초기노드 맥여야함
						//사실 당연한게 헤더노드가 있다는 것 자체가 이미 헤더노드라는 초기노드를 생성한 것이니
		At = A;
		for (int i = 1; i < N_A; i++) {
			scanf("%d", &temp);
			At = appendTerm(At, temp);
		}
	}

	scanf("%d", &N_B);

	if (N_B != 0) {
		scanf("%d", &temp);
		B = appendTerm(B, temp);
		Bt = B;
		for (int i = 1; i < N_B; i++) {
			scanf("%d", &temp);
			Bt = appendTerm(Bt, temp);
		}
	}

	temp = subset(A, B);

	printf("%d", temp);

}
listNode* getNode() {
	listNode* new;
	new = (listNode*)malloc(sizeof(listNode));
	if (new == NULL) {
		printf("Not enough memory!\n");
		return NULL;
	}
	new->link = NULL;

	return new;
}
listNode* appendTerm(listNode* k, int n) {
	listNode* new;
	new = getNode();
	new->num = n;

	if (k == NULL)	//for 헤더노드 없는 경우. 헤더노드가 있다면 main에서 미리 헤더노드에 getnode 받고 시작해서 시작주소자체가 null일 일은 없음
			//6주차 실습의 add함수 같은 경우는 헤더노드의 link가 null인거지 결국 head자체가 null인건 아니니 if(head->link == NULL)을 따지는 거임
		return new;

	k->link = new;
	k = new;
	
	return k;
}
int subset(listNode* A, listNode* B) {
	listNode* tmpA, * tmpB;
	int min;
	tmpA = A;
	tmpB = B;
	while (tmpA != NULL && tmpB != NULL) {
		if (tmpA->num == tmpB->num) {
			tmpA = tmpA->link;
			tmpB = tmpB->link;
		}
		else
			tmpB = tmpB->link;
	}
	if (tmpA == NULL)		//문제별로 특수한 경우 잘 생각할 것. 바로 공집합들어와서 NULL인 경우와 밑에 tmpA->num에서 NULL참조 안 하도록 하는 경우
		return 0;

	min = tmpA->num;
	tmpA = tmpA->link;
	while (tmpA != NULL) {
		if (min > tmpA->num)	//뻘실수하지 말고 (왜 min이랑 tmpA->link랑 비교하고 자빠졌어
			min = tmpA->num;
		tmpA = tmpA->link;
	}
	return min;
}




2번
#include <stdio.h>
#include <stdlib.h>
#pragma warning(disable:4996)
typedef struct ListNode {
	struct ListNode* link;
	int num;
}listNode;


listNode* getNode();
listNode* appendTerm(listNode* k, int n);
listNode* Union(listNode* A, listNode* B);
listNode* Intersect(listNode* A, listNode* B);

int main()
{
	int N_A, N_B,temp;
	listNode* A, * B, * result, * At, * Bt, *tmp;
	A = B = result = At = Bt = tmp = NULL;

	A = getNode();
	B = getNode();		//헤더노드가 있는 문제라 노드 받아놓고 시작

	At = A;
	scanf("%d", &N_A);
	for (int i = 0; i < N_A; i++) {
		scanf("%d", &temp);
		At = appendTerm(At, temp);
	}

	Bt = B;
	scanf("%d", &N_B);
	for (int i = 0; i < N_B; i++) {
		scanf("%d", &temp);
		Bt = appendTerm(Bt, temp);
	}


	result = Union(A, B);	//At,Bt 안 넣어도 됨. 함수 안에서 이미 매개포인터 따로 만들어주잖아
				//함수 내에서 매개포인터 만들어주는 지 여부 잘 확인. 인자가 달라짐
	tmp = result->link;
	if (tmp != NULL) {
		while (tmp != NULL) {
			printf(" %d", tmp->num);
			tmp = tmp->link;
		}
	}
	else
		printf("0");


	printf("\n");

	result = Intersect(A, B);
	tmp = result->link;
	if (tmp != NULL) {
		while (tmp != NULL) {
			printf(" %d", tmp->num);
			tmp = tmp->link;
		}
	}
	else
		printf("0");

	printf("\n");


}
listNode* getNode() {
	listNode* new;
	new = (listNode*)malloc(sizeof(listNode));
	if (new == NULL) {
		printf("Not enough memory!\n");
		return NULL;
	}
	new->link = NULL;

	return new;
}
listNode* appendTerm(listNode* k, int n) {
	listNode* new;
	new = getNode();
	new->num = n;

	k->link = new;
	k = new;
	
	return k;
}
listNode* Union(listNode* A, listNode* B) {
	listNode* tmpA, * tmpB, * result, * tmp;
	result = tmp = NULL;
	tmpA = A->link;	//A는 헤더노드니까
	tmpB = B->link;
	result = getNode();
	tmp = result;		//좌변 우변 반대로 쓰는 실수하지말고
	while (tmpA != NULL && tmpB != NULL) {
		if (tmpA->num > tmpB->num) {
			tmp = appendTerm(tmp, tmpB->num);
			tmpB = tmpB->link;
		}
		else if (tmpA->num < tmpB->num) {
			tmp = appendTerm(tmp, tmpA->num);
			tmpA = tmpA->link;
		}
		else {
			tmp = appendTerm(tmp, tmpB->num);
			tmpA = tmpA->link;
			tmpB = tmpB->link;
		}
	}

	while (tmpA != NULL) {
		tmp = appendTerm(tmp, tmpA->num);
		tmpA = tmpA->link;
	}
	while (tmpB != NULL) {
		tmp = appendTerm(tmp, tmpB->num);
		tmpB = tmpB->link;
	}
	return result;
}
listNode* Intersect(listNode* A, listNode* B) {
	listNode* tmpA, * tmpB, * result, * tmp;
	tmpA = A->link;
	tmpB = B->link;
	result = getNode();
	tmp = result;
	while (tmpA != NULL && tmpB != NULL) {
		if (tmpA->num > tmpB->num) 
			tmpB = tmpB->link;
		
		else if (tmpA->num < tmpB->num) 
			tmpA = tmpA->link;
		
		else {
			tmp = appendTerm(tmp, tmpB->num);
			tmpA = tmpA->link;
			tmpB = tmpB->link;
		}
	}

	return result;
}
//매개포인터에 초기값은 해당노드가 헤더노드에서 출발해야하는지 그 다음인지 생각
//헤더노드가 있을 때 =>단순 훑어보는거면 헤더노드->link, 원소 추가면 그냥 헤더노드 대입
//헤더노드 없을 때 => 애초에 시작할 때 lin 생각x. 무조건 매개포인트 = 헤더포인트로 초기화